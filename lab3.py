# -*- coding: utf-8 -*-
"""Lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GOgoWuH4SM4LkTCtOS_74LkT9oxLX5bU
"""



""""dictionary"

"""

from collections import deque

# Updated city connections with new city names
city_graph = {
    'New York': ['Boston'],
    'Boston': ['New York', 'Chicago'],
    'Chicago': ['Boston', 'Denver'],
    'Denver': ['Chicago', 'San Francisco'],
    'San Francisco': ['Denver', 'Los Angeles'],
    'Los Angeles': ['San Francisco', 'Las Vegas'],
    'Las Vegas': ['Los Angeles']
}

def bfs_shortest_path(graph, start, goal):

    queue = deque([[start]])
    visited = set()

    while queue:
        path = queue.popleft()
        current_city = path[-1]

        if current_city == goal:
            return path

        if current_city not in visited:
            visited.add(current_city)
            for neighbor in graph.get(current_city, []):
                new_path = list(path)
                new_path.append(neighbor)
                queue.append(new_path)

    return None

def dfs_path(graph, start, goal, path=None, visited=None):

    if path is None:
        path = []
    if visited is None:
        visited = set()

    path.append(start)
    visited.add(start)

    if start == goal:
        return path

    for neighbor in graph.get(start, []):
        if neighbor not in visited:
            result = dfs_path(graph, neighbor, goal, path.copy(), visited.copy())
            if result:
                return result

    return None

# New start and goal cities
start_city = "New York"
goal_city = "Las Vegas"

# Run BFS and DFS with updated cities
bfs_result = bfs_shortest_path(city_graph, start_city, goal_city)
print("BFS Shortest Path from New York to Las Vegas:", bfs_result)

dfs_result = dfs_path(city_graph, start_city, goal_city)
print("DFS Path from New York to Las Vegas:", dfs_result)